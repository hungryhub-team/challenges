continue
params["authenticity_token"]
params["authenticity_token"].valid?
params["authenticity_token"]
"authenticity_token"
params["authenticity_token"]
params[:authenticity_token]
params[:session]
params
continue
params
continue
params
Rails.env.test?
continue
params
continue
params
continue
params
continue
params
continue
params
continue
charity
params
continue
charity
params
continue
charge
continue
params
continue
Charity.find_by(id: params[:charity])
Charity.find_by(id: params[:charity]) || random_charity
params
continue
params
continue
params
continue
params
continue
params
continue
charge.paid
charge
continue
params
continue
params[:omise_token]
params
continue
params
continue
params
continue
params
continue
params[:omise_token]
params
continue
@params
params
continue
n
charity
!charity
continue
n
!charity
charity
continue
!charity
n
charity
continue
charge
charge.update(paid: true)
charge
charge[:paid] = true
charge[:paid]
charge
charge.paid
charge.paid= true
paid
paid= true
charge.paid= true
charge.paid = true
charge.paid
charge
continue
charge
params
continue
charge.paid
charge
continue
params
continue
params[:amount].to_i <= 20
params[:amount].to_i
params[:amount]
params[:amount].blank?
unless params[:amount].blank? || convert(params[:amount]).to_i <= 20
unless params[:amount].blank?
unlessparams[:amount].blank?
params[:amount].blank?
params
continue
(params[:amount].to_f).round(2)
(params[:amount].to_f).round(3)
"#{(params[:amount].to_f).round(3)} MHz"
"#{(params[:amount].frequency.to_f).round(3)} MHz"
continue
(params[:amount].to_f.round(2) * 100).to_i
params[:amount].to_f.round(2) * 100
params[:amount].to_f.round
params[:amount]
charge
params
charge
continue
charge
params
continue
charge
continue
charge
continue
charge
continue
charge
continue
Kernel.method(m).call("342.02")
Kernel.method(:m).call("342.02")
Kernel.method(:Float).call("342.02")
Kernel.method(:float).call("342.02")
Kernel.method(:Integer).call("342.02")
Kernel.method(:Integer).call("342")
Kernel.method(:Integer).call(input)
Kernel.method(Integer).call(input)
m
m\
Kernel.method(m).call(input)
input
continue
convert(params[:amount])
(params[:amount].to_f.round(2) * 100).to_i
params[:amount].to_f.round(2) * 100
params[:amount].to_f.round(2)
params[:amount].to_f
params[:amount]
params
convert(params[:amount])
params[:amount]
continue
params[:amount]
convert(params[:amount])
params[:amount]
continue
params[:amount].to_i <= 20
params[:amount].to_i
params[:amount]
params
convert(params[:amount]) <= 20
assert_template :index
continue
to_numeric(params[:amount])
params[:amount].to_numeric?
params[:amount].to_numeric
params[:amount].to_numberic
params[:amount]
params
continue
'%g' % Float(input)
input
continue
charge
params
continue
params
charge
continue
params[:amount] != "999"
params[:amount]
params
charge
params
continue
a.name
a = OpenStruct.new({name: "abcd", dfds: "ads"})
OpenStruct.new({name: "abcd", dfds: "ads"})
a[:name]
a.name
a
a.map{|k| k.name}
a = {name: "abcd", dfds: "ads"}
{name: "abcd", dfds: "ads"}
OpenStruct.new({name: "abcd", dfds: "ads"})
OpenStruct.new({name: "abcd"})
OpenStruct.new(name: "abcd")
OpenStruct.new
a = {name: "abc"}
a
a = Hash.new(name: "abcd")
a = Hash.new
a.new(name: "abc")
a(name: "abc")
a = Hash.new
Hash.new{name: "abc"}
Hash.new(name: "abc")
Hash.new
OpenStruct.new(name: "abc")
Hash.new(name: "abc")
Hash.new
params[:amount].to_f.round(1)
params[:amount].to_f
params[:amount].to_i
params[:amount]
params[:amount].delete(" ")
params[:amount].delete("")
params[:amount].sub!("", '')
params[:amount].sub!("", )
params[:amount].sub!("", '')
params[:amount].sub!("/", '')
params[:amount].sub!("/", '/')
params[:amount].sub("/", '/')
params[:amount].sub("/", '')
params[:amount].sub("", '')
params[:amount].sub("", )
params[:amount].sub("")
params[:amount]
params
continue
params
continue
params
continue
params
continue
params[:amount].to_d
params[:amount].to_f
params[:amount].to_i
params[:amount].to_s
params[:amount].to_c
params[:amount].to_d
params[:amount].to_r
params[:amount].to_a
params[:amount]
params[:amount].to_f
params[:amount].to_f.round(2)
params[:amount]
continue
